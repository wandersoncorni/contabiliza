/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../resources/js/helpers.js":
/*!*************************************!*\
  !*** ../../resources/js/helpers.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addInvalidFeedback: () => (/* binding */ addInvalidFeedback),\n/* harmony export */   cepFormat: () => (/* binding */ cepFormat),\n/* harmony export */   clearCurrencyValue: () => (/* binding */ clearCurrencyValue),\n/* harmony export */   cpfFormat: () => (/* binding */ cpfFormat),\n/* harmony export */   currencyFormat: () => (/* binding */ currencyFormat),\n/* harmony export */   foneFormat: () => (/* binding */ foneFormat),\n/* harmony export */   formatCurrencyValue: () => (/* binding */ formatCurrencyValue),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatPercentage: () => (/* binding */ formatPercentage),\n/* harmony export */   getAddress: () => (/* binding */ getAddress),\n/* harmony export */   getButtons: () => (/* binding */ getButtons),\n/* harmony export */   isValidCPF: () => (/* binding */ isValidCPF),\n/* harmony export */   listStates: () => (/* binding */ listStates),\n/* harmony export */   parseCurrencyToFloat: () => (/* binding */ parseCurrencyToFloat),\n/* harmony export */   removeFromArray: () => (/* binding */ removeFromArray),\n/* harmony export */   removeInvalidFeedback: () => (/* binding */ removeInvalidFeedback)\n/* harmony export */ });\n/**\n * Classe para armazenar funcoes utilitarias\n */\n\n\n/**\n * Formata o valor do campo monetario\n * @param {string} field O seletor do campo\n */\nfunction formatCurrencyValue(field) {\n  $(field).on('input', function () {\n    let valor = $(this).val();\n    valor = valor.replace(/\\D/g, '');\n    valor = (Number(valor) / 100).toFixed(2);\n    $(this).val(new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(valor));\n  });\n}\n/**\n * Sanitiza o valor dos campos com a classe \"currency\"\n * @param {string} field\n * @returns\n */\nfunction clearCurrencyValue(value) {\n  return value.replace(/[^\\d,]/g, '').replace('.', '').replace(',', '.');\n}\n/**\n * Formata o valor para o padrao monetario brasileiro\n * @param {String} value\n * @returns\n */\nfunction currencyFormat(value) {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n}\n/**\n * Formata o cep\n * @param {*} field \n */\nfunction cepFormat(field) {\n  // Remove tudo que não for número\n  let value = $(field).val().replace(/\\D/g, '');\n\n  // Limita a 8 dígitos\n  if (value.length > 8) {\n    value = value.substring(0, 8);\n  }\n\n  // Aplica o formato 00000-000\n  if (value.length > 5) {\n    value = value.substring(0, 5) + '-' + value.substring(5);\n  }\n  $(field).val(value);\n}\n/**\n * Busca o endereço pelo cep\n */\nfunction getAddress(field) {\n  if ($(field).val().length == 9) {\n    const seletor = $(field).data('address');\n    fetch('https://viacep.com.br/ws/' + $(field).val() + '/json/', {\n      method: 'GET',\n      dataType: 'json'\n    }).then(async response => {\n      if (!response.ok) {\n        return;\n      }\n      $(`[data-address=\"${seletor}\"]`).siblings('.invalid-feedback').remove();\n      $(`[data-address=\"${seletor}\"].is-invalid`).removeClass('is-invalid');\n      const data = await response.json();\n      if (data.erro) {\n        addInvalidFeedback('[name=\"cep\"]', 'CEP inválido!');\n        $(`[data-address=\"${seletor}\"]:not([name=\"cep\"])`).val('');\n        return;\n      }\n      $(`[data-address=\"${seletor}\"]`).each(function () {\n        if ($(this).prop('name').includes('estado')) {\n          $(this).children('option').each(function () {\n            if ($(this).text() === data.estado) {\n              $(this).prop('selected', true);\n            }\n          });\n          return;\n        }\n        Object.keys(data).forEach(d => {\n          if ($(this).prop('name').includes(d)) {\n            $(this).val(data[d]);\n          }\n        });\n      });\n    });\n  }\n}\nfunction formatPercentage(field) {\n  $(document).on('input', field, function () {\n    let val = $(this).val();\n    val = sanitizeInput(val);\n    if (val.length > 5) {\n      val = val.substring(0, 5);\n    }\n    if (val > 100) {\n      val = val / 10;\n    }\n    $(this).val(val + (val !== '' ? '%' : ''));\n  });\n  $(document).on('focus', field, function () {\n    let val = $(this).val();\n    $(this).val(val.replace('%', ''));\n  });\n  $(document).on('blur', field, function () {\n    let val = sanitizeInput($(this).val());\n    val = clampToPercentage(val);\n    if (val !== '') {\n      $(this).val(val + '%');\n    } else {\n      $(this).val('');\n    }\n  });\n}\nfunction sanitizeInput(val) {\n  // Permitir só números e um único ponto\n  val = val.replace(/[^0-9.]/g, '');\n  let partes = val.split('.');\n  if (partes.length > 2) {\n    val = partes[0] + '.' + partes[1];\n  }\n  return val;\n}\nfunction clampToPercentage(val) {\n  let num = parseFloat(val);\n  if (isNaN(num)) return '';\n  if (num < 0) num = 0;\n  if (num > 100) num = 100;\n  return num.toString();\n}\nfunction addInvalidFeedback(field, message = 'Campo obrigatório!') {\n  $(field).addClass('is-invalid');\n  $(field).after('<div class=\"invalid-feedback\">' + message + '</div>');\n}\n/**\n * Remove a classe is-invalid e o feedback de erro\n * @param {*} form O seletor do formulário, se não for passado, remove de todos. Deve ser acrescentado de # (ex: #form-company)\n */\nfunction removeInvalidFeedback(form = '') {\n  $(`${form} .is-invalid`).removeClass('is-invalid');\n  $(`${form} .invalid-feedback`).remove();\n}\n// aplica a máscara no CPF\nfunction cpfFormat(field) {\n  var value = $(field).val().replace(/\\D/g, ''); // remove tudo que não for número\n\n  if (value.length > 11) value = value.substring(0, 11); // limita a 11 dígitos\n\n  // aplica a máscara\n  if (value.length > 9) {\n    value = value.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{1,2})/, \"$1.$2.$3-$4\");\n  } else if (value.length > 6) {\n    value = value.replace(/(\\d{3})(\\d{3})(\\d{1,3})/, \"$1.$2.$3\");\n  } else if (value.length > 3) {\n    value = value.replace(/(\\d{3})(\\d{1,3})/, \"$1.$2\");\n  }\n  $(field).val(value);\n}\n// aplica a máscara no telefone\nfunction foneFormat(field) {\n  var value = $(field).val().replace(/\\D/g, ''); // remove tudo que não for número\n\n  if (value.length > 11) value = value.substring(0, 11); // limita a 11 dígitos\n\n  if (value.length == 11) {\n    // celular com 9 dígitos\n    value = value.replace(/^(\\d{2})(\\d{5})(\\d{4})$/, '($1) $2-$3');\n  } else if (value.length >= 6) {\n    // fixo com 8 dígitos\n    value = value.replace(/^(\\d{2})(\\d{4})(\\d{0,4})$/, '($1) $2-$3');\n  } else if (value.length >= 3) {\n    value = value.replace(/^(\\d{2})(\\d{0,5})$/, '($1) $2');\n  } else if (value.length > 0) {\n    value = value.replace(/^(\\d{0,2})$/, '($1)');\n  }\n  $(field).val(value);\n}\n/**\n * Converte o valor de uma string no formato de moeda para float\n * @param {string} valor \n * @returns \n */\nfunction parseCurrencyToFloat(valor) {\n  if (typeof valor !== 'string') return 0;\n  return parseFloat(valor.replace(/\\s/g, '') // remove espaços\n  .replace('R$', '') // remove símbolo R$\n  .replace(/\\./g, '') // remove pontos\n  .replace(',', '.') // troca vírgula por ponto\n  );\n}\n// Lista de estados brasileiros\nlet statesList = [];\nasync function listStates(nameField) {\n  $(nameField).empty().addClass('skeleton');\n  if (statesList.length == 0) {\n    const request = await fetch('/api/v1/auxiliares/listar-estados');\n    statesList = await request.json();\n  }\n  $(nameField).html('<option value=\"\">Selecione um estado</option>').removeClass('skeleton');\n  Object.keys(statesList).forEach(state => {\n    $(nameField).append($('<option />', {\n      value: statesList[state].sigla,\n      text: statesList[state].descricao\n    }));\n  });\n}\n/**\n * Remove um item do array\n * @param {array} arr \n * @param {string} id \n * @returns\n */\nconst removeFromArray = (arr, id) => {\n  const idx = arr.findIndex(item => item && item.id == id);\n  console.log(idx);\n  if (idx === -1) return arr;\n  arr.splice(idx, 1);\n  return arr;\n};\n/**\n * Valida um CPF\n * @param {string} cpf \n * @returns boolean\n */\nfunction isValidCPF(cpf) {\n  cpf = (cpf || '').replace(/\\D/g, '');\n  if (cpf.length !== 11) return false;\n\n  // rejeita sequências iguais (ex: 11111111111)\n  if (/^(\\d)\\1{10}$/.test(cpf)) return false;\n\n  // primeiro dígito verificador\n  let sum = 0;\n  for (let i = 0; i < 9; i++) {\n    sum += parseInt(cpf.charAt(i)) * (10 - i);\n  }\n  let rest = sum % 11;\n  let dig1 = rest < 2 ? 0 : 11 - rest;\n  if (dig1 !== parseInt(cpf.charAt(9))) return false;\n\n  // segundo dígito verificador\n  sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += parseInt(cpf.charAt(i)) * (11 - i);\n  }\n  rest = sum % 11;\n  let dig2 = rest < 2 ? 0 : 11 - rest;\n  if (dig2 !== parseInt(cpf.charAt(10))) return false;\n  return true;\n}\n/**\n * \n * @param {numeric} id O id do registro\n * @param {*} url \n * @returns \n */\nfunction getButtons(id, url) {\n  return $('<div />').append([$('<button />', {\n    class: 'btn btn-link btn-transparent text-dark dropdown-toggle dropdown-toggle-split m-0 p-0',\n    type: 'button',\n    'data-bs-toggle': 'dropdown',\n    'aria-expanded': false,\n    'aria-haspopup': true\n  }).append($('<i />', {\n    class: 'heroicon heroicon-horizontal-elipsis float-start'\n  })), $('<div />', {\n    class: 'dropdown-menu dashboard-dropdown dropdown-menu-start mt-2 py-1'\n  }).append($('<a />', {\n    class: 'dropdown-item text-info',\n    href: `${url}/${id}`,\n    'data-action': 'show'\n  }).append($('<i />', {\n    class: 'heroicon heroicon-eye me-2'\n  }), 'Ver'), $('<a />', {\n    class: 'dropdown-item text-primary',\n    href: `${url}/${id}`,\n    'data-action': 'edit'\n  }).append($('<i />', {\n    class: 'heroicon heroicon-pencil-square me-2'\n  }), 'Editar'), $('<a />', {\n    class: 'dropdown-item text-danger',\n    href: `${url}/${id}`,\n    'data-action': 'delete'\n  }).append($('<i />', {\n    class: 'heroicon heroicon-trash me-2'\n  }), 'Excluir'))]).prop('innerHTML');\n}\n/**\n * Formata uma data para o padrão pt-BR\n * @param {string} date \n * @returns \n */\nfunction formatDate(date) {\n  return new Date(date).toLocaleDateString('pt-BR', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  });\n}\n\n//# sourceURL=webpack://access-control/../../resources/js/helpers.js?");

/***/ }),

/***/ "./resources/js/financial/accounts.js":
/*!********************************************!*\
  !*** ./resources/js/financial/accounts.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _resources_js_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../resources/js/helpers */ \"../../resources/js/helpers.js\");\n\n\n\nfunction init() {\n  const url = '/api/v1/accounts';\n  let accounts = [];\n\n  // Função para carregar empresas no select\n  function loadCompanies() {\n    if ($('#company_id option').length <= 1) {\n      fetch('/api/v1/companies', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).then(response => response.json()).then(json => {\n        const companies = json.map(company => `<option value=\"${company.id}\">${company.nome}</option>`);\n        companies.unshift('<option selected>Selecione uma empresa</option>');\n        $('#company_id').html(companies.join(''));\n      }).catch(error => {\n        console.error('Erro ao carregar empresas:', error);\n        Swal.fire('Erro', 'Não foi possível carregar as empresas.', 'error');\n      });\n    }\n  }\n\n  // Função para carregar DataTable\n  function loadTable() {\n    if ($.fn.dataTable.isDataTable('#tb-accounts')) {\n      $('#tb-accounts').DataTable().destroy();\n    }\n    return new DataTable('#tb-accounts', {\n      ajax: function (data, callback) {\n        fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          credentials: 'include'\n        }).then(response => response.json()).then(json => {\n          accounts = json;\n          callback({\n            data: json\n          });\n        }).catch(error => {\n          console.error('Erro ao carregar os dados:', error);\n          callback({\n            data: []\n          });\n        });\n      },\n      columns: [{\n        data: 'bank_name'\n      }, {\n        data: 'bank_code'\n      }, {\n        data: 'agency'\n      }, {\n        data: 'account_number'\n      }, {\n        data: data => data.status === 'active' ? '<span class=\"text-success\">Ativo</span>' : data.status === 'pending' ? '<span class=\"text-warning\">Pendente</span>' : '<span class=\"text-danger\">Inativo</span>'\n      }, {\n        data: data => (0,_resources_js_helpers__WEBPACK_IMPORTED_MODULE_0__.getButtons)(data.id, url)\n      }],\n      columnDefs: [{\n        targets: [5],\n        orderable: false\n      }, {\n        targets: [5],\n        searchable: false\n      }],\n      order: [[0, 'asc']]\n    });\n  }\n\n  // Inicializar tabela\n  loadTable();\n\n  // Carregar empresas ao abrir o modal\n  $('#new-account').on('click', function () {\n    $('#form-account')[0].reset();\n    $('#form-account input[name=\"id\"]').val('');\n    $('#modal-form-account .modal-title').text('Nova Conta');\n    loadCompanies();\n    $('#modal-form-account').modal('show');\n  });\n\n  // Ações do DataTable\n  $('#tb-accounts').on('click', '.dropdown-item', function (e) {\n    e.preventDefault();\n    const id = $(this).attr('href').split('/').pop();\n    const action = $(this).data('action');\n    if (action === 'show') {\n      const account = accounts.find(a => a.id == id);\n      Swal.fire({\n        title: account.bank_name,\n        html: `\n                    <p><strong>Código do Banco:</strong> ${account.bank_code}</p>\n                    <p><strong>Agência:</strong> ${account.agency}</p>\n                    <p><strong>Número da Conta:</strong> ${account.account_number}</p>\n                    <p><strong>Dígito:</strong> ${account.digit || '-'}</p>\n                    <p><strong>Gerente:</strong> ${account.manager_name || '-'}</p>\n                    <p><strong>Telefone:</strong> ${account.contact_phone || '-'}</p>\n                    <p><strong>Tipo de Conta:</strong> ${account.account_type || '-'}</p>\n                    <p><strong>Status:</strong> ${account.status === 'active' ? 'Ativo' : account.status === 'pending' ? 'Pendente' : 'Inativo'}</p>\n                    <p><strong>Chave PIX:</strong> ${account.pix_key || '-'}</p>\n                    <p><strong>Observações:</strong> ${account.notes || '-'}</p>\n                `,\n        icon: 'info',\n        confirmButtonText: 'Fechar'\n      });\n    } else if (action === 'edit') {\n      const account = accounts.find(a => a.id == id);\n      $('#form-account input[name=\"id\"]').val(account.id);\n      $('#form-account select[name=\"company_id\"]').val(account.company_id);\n      $('#form-account input[name=\"bank_name\"]').val(account.bank_name);\n      $('#form-account input[name=\"bank_code\"]').val(account.bank_code);\n      $('#form-account input[name=\"agency\"]').val(account.agency);\n      $('#form-account input[name=\"account_number\"]').val(account.account_number);\n      $('#form-account input[name=\"digit\"]').val(account.digit || '');\n      $('#form-account input[name=\"manager_name\"]').val(account.manager_name || '');\n      $('#form-account input[name=\"contact_phone\"]').val(account.contact_phone || '');\n      $('#form-account select[name=\"account_type\"]').val(account.account_type || '');\n      $('#form-account select[name=\"status\"]').val(account.status);\n      $('#form-account input[name=\"pix_key\"]').val(account.pix_key || '');\n      $('#form-account textarea[name=\"notes\"]').val(account.notes || '');\n      $('#modal-form-account .modal-title').text('Editar Conta');\n      loadCompanies();\n      $('#modal-form-account').modal('show');\n    } else if (action === 'delete') {\n      Swal.fire({\n        title: 'Exclusão de conta',\n        text: 'Você não poderá reverter esta ação!',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Sim, excluir!',\n        cancelButtonText: 'Cancelar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          fetch(`${url}/${id}`, {\n            method: 'DELETE',\n            headers: {\n              'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n              'Accept': 'application/json'\n            },\n            credentials: 'include'\n          }).then(response => response.json()).then(json => {\n            if (response.ok) {\n              loadTable();\n              Swal.fire('Sucesso', json.message || 'Conta excluída com sucesso!', 'success');\n            } else {\n              Swal.fire('Erro', json.message || 'Erro ao excluir conta.', 'error');\n            }\n          }).catch(error => {\n            console.error('Erro ao excluir conta:', error);\n            Swal.fire('Erro', 'Erro ao processar a requisição.', 'error');\n          });\n        }\n      });\n    }\n  });\n\n  // Enviar formulário\n  $('#form-account').on('submit', function (e) {\n    e.preventDefault();\n    const id = $('#form-account input[name=\"id\"]').val();\n    const formData = new FormData(this);\n    const urlAction = id ? `${url}/${id}` : url;\n    const method = id ? 'PUT' : 'POST';\n    if (id) {\n      formData.append('_method', 'PUT');\n    }\n    fetch(urlAction, {\n      method: 'POST',\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n        'Accept': 'application/json'\n      },\n      body: formData,\n      credentials: 'include'\n    }).then(response => response.json()).then(json => {\n      if (response.ok) {\n        $('#modal-form-account').modal('hide');\n        $('#form-account')[0].reset();\n        loadTable();\n        Swal.fire('Sucesso', json.message || 'Conta salva com sucesso!', 'success');\n      } else {\n        Swal.fire('Erro', json.message || 'Erro ao salvar conta.', 'error');\n      }\n    }).catch(error => {\n      console.error('Erro ao salvar conta:', error);\n      Swal.fire('Erro', 'Erro ao processar a requisição.', 'error');\n    });\n  });\n}\n\n//# sourceURL=webpack://access-control/./resources/js/financial/accounts.js?");

/***/ }),

/***/ "./resources/js/financial/financial.js":
/*!*********************************************!*\
  !*** ./resources/js/financial/financial.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _accounts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accounts.js */ \"./resources/js/financial/accounts.js\");\n/* harmony import */ var _transactions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transactions.js */ \"./resources/js/financial/transactions.js\");\n\n\n\n\n$(function () {\n  // Desabilita o clique nos links do menu\n  $('#app-content #financialMenu ~ ul li').on('click', function (e) {\n    e.preventDefault();\n    const path = window.location.pathname;\n    if (path === '/financial/accounts') {\n      _accounts_js__WEBPACK_IMPORTED_MODULE_0__.init();\n    } else if (path === '/financial/transactions') {\n      _transactions_js__WEBPACK_IMPORTED_MODULE_1__.init();\n    } else {\n      console.warn('Sub-módulo financeiro não encontrado:', path);\n    }\n  });\n});\n\n//# sourceURL=webpack://access-control/./resources/js/financial/financial.js?");

/***/ }),

/***/ "./resources/js/financial/transactions.js":
/*!************************************************!*\
  !*** ./resources/js/financial/transactions.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _resources_js_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../resources/js/helpers */ \"../../resources/js/helpers.js\");\n\n\n\nfunction init() {\n  const url = '/api/v1/transactions';\n  let transactions = [];\n  let installments = [];\n\n  // Função para formatar valores monetários\n  function formatCurrency(value) {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  }\n\n  // Função para converter string monetária para número\n  function parseCurrency(value) {\n    return parseFloat(value.replace(/[^\\d,]/g, '').replace(',', '.'));\n  }\n\n  // Carregar selects\n  function loadSelects() {\n    // Carregar empresas\n    if ($('#company_id option').length <= 1) {\n      fetch('/api/v1/companies', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).then(response => response.json()).then(json => {\n        const companies = json.map(company => `<option value=\"${company.id}\">${company.nome}</option>`);\n        companies.unshift('<option selected>Selecione uma empresa</option>');\n        $('#company_id').html(companies.join(''));\n      }).catch(error => {\n        console.error('Erro ao carregar empresas:', error);\n        Swal.fire('Erro', 'Não foi possível carregar as empresas.', 'error');\n      });\n    }\n\n    // Carregar contas\n    if ($('#account_id option').length <= 1) {\n      fetch('/api/v1/accounts', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).then(response => response.json()).then(json => {\n        const accounts = json.map(account => `<option value=\"${account.id}\">${account.bank_name} (${account.account_number})</option>`);\n        accounts.unshift('<option selected>Selecione uma conta</option>');\n        $('#account_id').html(accounts.join(''));\n      }).catch(error => {\n        console.error('Erro ao carregar contas:', error);\n        Swal.fire('Erro', 'Não foi possível carregar as contas.', 'error');\n      });\n    }\n\n    // Carregar planos de contas\n    if ($('#chart_of_account_id option').length <= 1) {\n      fetch('/api/v1/chart_of_accounts', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).then(response => response.json()).then(json => {\n        const charts = json.map(chart => `<option value=\"${chart.id}\">${chart.name}</option>`);\n        charts.unshift('<option selected>Selecione um plano</option>');\n        $('#chart_of_account_id').html(charts.join(''));\n      }).catch(error => {\n        console.error('Erro ao carregar planos de contas:', error);\n        Swal.fire('Erro', 'Não foi possível carregar os planos de contas.', 'error');\n      });\n    }\n\n    // Carregar entidades\n    if ($('#entity_id option').length <= 1) {\n      fetch('/api/v1/entities', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).then(response => response.json()).then(json => {\n        const entities = json.map(entity => `<option value=\"${entity.id}\">${entity.name}</option>`);\n        entities.unshift('<option selected>Selecione uma entidade</option>');\n        $('#entity_id').html(entities.join(''));\n      }).catch(error => {\n        console.error('Erro ao carregar entidades:', error);\n        Swal.fire('Erro', 'Não foi possível carregar as entidades.', 'error');\n      });\n    }\n\n    // Carregar condições de pagamento\n    if ($('#payment_condition_id option').length <= 1) {\n      fetch('/api/v1/payment_conditions', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).then(response => response.json()).then(json => {\n        const conditions = json.map(condition => `<option value=\"${condition.id}\">${condition.name}</option>`);\n        conditions.unshift('<option selected>Selecione uma condição</option>');\n        $('#payment_condition_id').html(conditions.join(''));\n      }).catch(error => {\n        console.error('Erro ao carregar condições de pagamento:', error);\n        Swal.fire('Erro', 'Não foi possível carregar as condições de pagamento.', 'error');\n      });\n    }\n  }\n\n  // Carregar DataTable de lançamentos\n  function loadTable() {\n    if ($.fn.dataTable.isDataTable('#tb-transactions')) {\n      $('#tb-transactions').DataTable().destroy();\n    }\n    return new DataTable('#tb-transactions', {\n      ajax: function (data, callback) {\n        fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          credentials: 'include'\n        }).then(response => response.json()).then(json => {\n          transactions = json;\n          callback({\n            data: json\n          });\n        }).catch(error => {\n          console.error('Erro ao carregar os dados:', error);\n          callback({\n            data: []\n          });\n        });\n      },\n      columns: [{\n        data: 'date',\n        render: data => (0,_resources_js_helpers__WEBPACK_IMPORTED_MODULE_0__.formatDate)(data)\n      }, {\n        data: 'description'\n      }, {\n        data: 'chart_of_account.name',\n        defaultContent: '-'\n      }, {\n        data: data => `\n                        <div class=\"d-flex\">\n                            <svg class=\"icon icon-xs ${data.amount < 0 ? 'text-danger' : 'text-success'} me-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path fill-rule=\"evenodd\" d=\"${data.amount < 0 ? 'M12 18.75a.75.75 0 01-.75-.75V6.41l-2.22 2.22a.75.75 0 01-1.06-1.06l3.5-3.5a.75.75 0 011.06 0l3.5 3.5a.75.75 0 01-1.06 1.06l-2.22-2.22V18a.75.75 0 01-.75.75z' : 'M12 5.25a.75.75 0 01.75.75v5.59l2.22-2.22a.75.75 0 111.06 1.06l-3.5 3.5a.75.75 0 01-1.06 0l-3.5-3.5a.75.75 0 111.06-1.06l2.22 2.22V6a.75.75 0 01.75-.75z'}\" clip-rule=\"evenodd\" />\n                            </svg>\n                            ${formatCurrency(Math.abs(data.amount))}\n                        </div>`\n      }, {\n        data: data => data.status === 'success' ? '<span class=\"text-success\">Confirmado</span>' : data.status === 'pending' ? '<span class=\"text-warning\">Pendente</span>' : '<span class=\"text-danger\">Cancelado</span>'\n      }, {\n        data: data => (0,_resources_js_helpers__WEBPACK_IMPORTED_MODULE_0__.getButtons)(data.id, url)\n      }],\n      columnDefs: [{\n        targets: [5],\n        orderable: false\n      }, {\n        targets: [5],\n        searchable: false\n      }],\n      order: [[0, 'desc']]\n    });\n  }\n\n  // Carregar parcelas no modal\n  function loadInstallments(transactionId = null) {\n    const tbody = $('#tb-installments tbody');\n    tbody.empty();\n    installments = [];\n    if (transactionId) {\n      fetch(`/api/v1/transactions/${transactionId}/installments`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).then(response => response.json()).then(json => {\n        installments = json;\n        json.forEach(installment => addInstallmentRow(installment));\n      }).catch(error => {\n        console.error('Erro ao carregar parcelas:', error);\n        Swal.fire('Erro', 'Não foi possível carregar as parcelas.', 'error');\n      });\n    }\n  }\n\n  // Adicionar linha de parcela\n  function addInstallmentRow(installment = null) {\n    const tbody = $('#tb-installments tbody');\n    const rowId = installment ? installment.id : `new-${installments.length + 1}`;\n    const row = `\n            <tr data-id=\"${rowId}\">\n                <td><input type=\"number\" class=\"form-control number\" value=\"${installment ? installment.number : ''}\" min=\"1\"></td>\n                <td><input type=\"date\" class=\"form-control due_date\" value=\"${installment ? installment.due_date : ''}\"></td>\n                <td><input type=\"text\" class=\"form-control currency amount\" value=\"${installment ? formatCurrency(installment.amount) : ''}\"></td>\n                <td>\n                    <select class=\"form-control status\">\n                        <option value=\"pending\" ${installment && installment.status === 'pending' ? 'selected' : ''}>Pendente</option>\n                        <option value=\"paid\" ${installment && installment.status === 'paid' ? 'selected' : ''}>Pago</option>\n                        <option value=\"overdue\" ${installment && installment.status === 'overdue' ? 'selected' : ''}>Vencido</option>\n                    </select>\n                </td>\n                <td><button class=\"btn btn-xs btn-danger remove-installment\">Remover</button></td>\n            </tr>\n        `;\n    tbody.append(row);\n\n    // Aplicar máscara de moeda\n    $('.currency').on('input', function () {\n      let value = $(this).val();\n      value = value.replace(/\\D/g, '');\n      value = (Number(value) / 100).toFixed(2);\n      $(this).val(formatCurrency(value));\n    });\n  }\n\n  // Inicializar tabela\n  loadTable();\n\n  // Carregar selects ao abrir o modal\n  $('#new-transaction').on('click', function () {\n    $('#form-transaction')[0].reset();\n    $('#form-transaction input[name=\"id\"]').val('');\n    $('#modal-form-transaction .modal-title').text('Novo Lançamento');\n    loadSelects();\n    loadInstallments();\n    $('#modal-form-transaction').modal('show');\n  });\n\n  // Adicionar parcela\n  $('#add-installment').on('click', function () {\n    addInstallmentRow();\n  });\n\n  // Remover parcela\n  $('#tb-installments').on('click', '.remove-installment', function () {\n    $(this).closest('tr').remove();\n  });\n\n  // Ações do DataTable\n  $('#tb-transactions').on('click', '.dropdown-item', function (e) {\n    e.preventDefault();\n    const id = $(this).attr('href').split('/').pop();\n    const action = $(this).data('action');\n    if (action === 'show') {\n      const transaction = transactions.find(t => t.id == id);\n      Swal.fire({\n        title: transaction.description,\n        html: `\n                    <p><strong>Data:</strong> ${(0,_resources_js_helpers__WEBPACK_IMPORTED_MODULE_0__.formatDate)(transaction.date)}</p>\n                    <p><strong>Empresa:</strong> ${transaction.company.nome || '-'}</p>\n                    <p><strong>Conta:</strong> ${transaction.account ? `${transaction.account.bank_name} (${transaction.account.account_number})` : '-'}</p>\n                    <p><strong>Plano de Contas:</strong> ${transaction.chart_of_account ? transaction.chart_of_account.name : '-'}</p>\n                    <p><strong>Entidade:</strong> ${transaction.entity ? transaction.entity.name : '-'}</p>\n                    <p><strong>Condição de Pagamento:</strong> ${transaction.payment_condition ? transaction.payment_condition.name : '-'}</p>\n                    <p><strong>Valor:</strong> ${formatCurrency(Math.abs(transaction.amount))}</p>\n                    <p><strong>Tipo:</strong> ${transaction.type === 'entrada' ? 'Entrada' : transaction.type === 'saida' ? 'Saída' : 'Imposto'}</p>\n                    <p><strong>Status:</strong> ${transaction.status === 'success' ? 'Confirmado' : transaction.status === 'pending' ? 'Pendente' : 'Cancelado'}</p>\n                `,\n        icon: 'info',\n        confirmButtonText: 'Fechar'\n      });\n    } else if (action === 'edit') {\n      const transaction = transactions.find(t => t.id == id);\n      $('#form-transaction input[name=\"id\"]').val(transaction.id);\n      $('#form-transaction select[name=\"company_id\"]').val(transaction.company_id);\n      $('#form-transaction select[name=\"account_id\"]').val(transaction.account_id || '');\n      $('#form-transaction select[name=\"chart_of_account_id\"]').val(transaction.chart_of_account_id || '');\n      $('#form-transaction select[name=\"entity_id\"]').val(transaction.entity_id || '');\n      $('#form-transaction select[name=\"payment_condition_id\"]').val(transaction.payment_condition_id || '');\n      $('#form-transaction input[name=\"date\"]').val(transaction.date);\n      $('#form-transaction input[name=\"description\"]').val(transaction.description);\n      $('#form-transaction input[name=\"amount\"]').val(formatCurrency(transaction.amount));\n      $('#form-transaction select[name=\"type\"]').val(transaction.type);\n      $('#form-transaction select[name=\"status\"]').val(transaction.status);\n      $('#modal-form-transaction .modal-title').text('Editar Lançamento');\n      loadSelects();\n      loadInstallments(transaction.id);\n      $('#modal-form-transaction').modal('show');\n    } else if (action === 'delete') {\n      Swal.fire({\n        title: 'Exclusão de lançamento',\n        text: 'Você não poderá reverter esta ação!',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Sim, excluir!',\n        cancelButtonText: 'Cancelar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          fetch(`${url}/${id}`, {\n            method: 'DELETE',\n            headers: {\n              'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n              'Accept': 'application/json'\n            },\n            credentials: 'include'\n          }).then(response => response.json()).then(json => {\n            if (response.ok) {\n              loadTable();\n              Swal.fire('Sucesso', json.message || 'Lançamento excluído com sucesso!', 'success');\n            } else {\n              Swal.fire('Erro', json.message || 'Erro ao excluir lançamento.', 'error');\n            }\n          }).catch(error => {\n            console.error('Erro ao excluir lançamento:', error);\n            Swal.fire('Erro', 'Erro ao processar a requisição.', 'error');\n          });\n        }\n      });\n    }\n  });\n\n  // Enviar formulário\n  $('#form-transaction').on('submit', function (e) {\n    e.preventDefault();\n    const id = $('#form-transaction input[name=\"id\"]').val();\n    const formData = new FormData(this);\n    formData.set('amount', parseCurrency(formData.get('amount')));\n    const urlAction = id ? `${url}/${id}` : url;\n    const method = id ? 'PUT' : 'POST';\n    if (id) {\n      formData.append('_method', 'PUT');\n    }\n\n    // Coletar parcelas\n    const installmentsData = [];\n    $('#tb-installments tbody tr').each(function () {\n      const row = $(this);\n      installmentsData.push({\n        id: row.data('id').startsWith('new-') ? null : row.data('id'),\n        number: row.find('.number').val(),\n        due_date: row.find('.due_date').val(),\n        amount: parseCurrency(row.find('.amount').val()),\n        status: row.find('.status').val()\n      });\n    });\n    formData.append('installments', JSON.stringify(installmentsData));\n    fetch(urlAction, {\n      method: 'POST',\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content'),\n        'Accept': 'application/json'\n      },\n      body: formData,\n      credentials: 'include'\n    }).then(response => response.json()).then(json => {\n      if (response.ok) {\n        $('#modal-form-transaction').modal('hide');\n        $('#form-transaction')[0].reset();\n        loadTable();\n        Swal.fire('Sucesso', json.message || 'Lançamento salvo com sucesso!', 'success');\n      } else {\n        Swal.fire('Erro', json.message || 'Erro ao salvar lançamento.', 'error');\n      }\n    }).catch(error => {\n      console.error('Erro ao salvar lançamento:', error);\n      Swal.fire('Erro', 'Erro ao processar a requisição.', 'error');\n    });\n  });\n\n  // Formatar campo de valor\n  $('.currency').on('input', function () {\n    let value = $(this).val();\n    value = value.replace(/\\D/g, '');\n    value = (Number(value) / 100).toFixed(2);\n    $(this).val(formatCurrency(value));\n  });\n}\n\n//# sourceURL=webpack://access-control/./resources/js/financial/transactions.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/financial/financial.js");
/******/ 	
/******/ })()
;